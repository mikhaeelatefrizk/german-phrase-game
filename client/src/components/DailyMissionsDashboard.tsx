/**
 * Daily Missions Dashboard Component
 * 
 * Displays personalized daily learning missions generated by the adaptive engine.
 * Features:
 * - Personalized mission generation
 * - Progress tracking
 * - Difficulty adjustment
 * - Streak tracking
 */

import React, { useEffect, useState } from 'react';
import { trpc } from '../client';
import { Button } from './ui/button';
import { Card } from './ui/card';
import { Progress } from './ui/progress';
import { Badge } from './ui/badge';
import { CheckCircle2, Circle, Flame, Target, TrendingUp } from 'lucide-react';

interface Mission {
  id: string;
  title: string;
  description: string;
  type: 'vocabulary' | 'grammar' | 'conversation' | 'listening';
  difficulty: 'easy' | 'intermediate' | 'hard';
  targetWords: number;
  completed: boolean;
  reward: number;
  estimatedTime: number; // in minutes
}

interface DailyMissionsDashboardProps {
  onMissionComplete?: (mission: Mission) => void;
}

export const DailyMissionsDashboard: React.FC<DailyMissionsDashboardProps> = ({
  onMissionComplete,
}) => {
  const [missions, setMissions] = useState<Mission[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [completedCount, setCompletedCount] = useState(0);
  const [totalReward, setTotalReward] = useState(0);

  const missionsQuery = trpc.advancedLearning.getDailyMissions.useQuery();
  const recommendationsQuery = trpc.advancedLearning.getAdaptiveRecommendations.useQuery();

  useEffect(() => {
    if (missionsQuery.data) {
      setMissions(missionsQuery.data);
      const completed = missionsQuery.data.filter((m) => m.completed).length;
      const reward = missionsQuery.data.reduce((sum, m) => sum + (m.completed ? m.reward : 0), 0);
      setCompletedCount(completed);
      setTotalReward(reward);
      setIsLoading(false);
    }
  }, [missionsQuery.data]);

  const handleMissionClick = (mission: Mission) => {
    if (!mission.completed) {
      // Mark as completed
      const updated = { ...mission, completed: true };
      setMissions((prev) =>
        prev.map((m) => (m.id === mission.id ? updated : m))
      );
      setCompletedCount((prev) => prev + 1);
      setTotalReward((prev) => prev + mission.reward);

      if (onMissionComplete) {
        onMissionComplete(updated);
      }
    }
  };

  const getMissionIcon = (type: string) => {
    switch (type) {
      case 'vocabulary':
        return 'üìö';
      case 'grammar':
        return 'üìù';
      case 'conversation':
        return 'üí¨';
      case 'listening':
        return 'üéß';
      default:
        return '‚≠ê';
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy':
        return 'bg-green-100 text-green-800';
      case 'intermediate':
        return 'bg-yellow-100 text-yellow-800';
      case 'hard':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your missions...</p>
        </div>
      </div>
    );
  }

  const progressPercentage = missions.length > 0 ? (completedCount / missions.length) * 100 : 0;

  return (
    <div className="space-y-6">
      {/* Header Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="p-4 bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Today's Progress</p>
              <p className="text-2xl font-bold text-blue-600">{completedCount}/{missions.length}</p>
            </div>
            <Target className="w-8 h-8 text-blue-600 opacity-50" />
          </div>
        </Card>

        <Card className="p-4 bg-gradient-to-br from-green-50 to-green-100 border-green-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Reward</p>
              <p className="text-2xl font-bold text-green-600">{totalReward} XP</p>
            </div>
            <TrendingUp className="w-8 h-8 text-green-600 opacity-50" />
          </div>
        </Card>

        <Card className="p-4 bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Study Streak</p>
              <p className="text-2xl font-bold text-orange-600">7 days</p>
            </div>
            <Flame className="w-8 h-8 text-orange-600 opacity-50" />
          </div>
        </Card>

        <Card className="p-4 bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Avg. Accuracy</p>
              <p className="text-2xl font-bold text-purple-600">87%</p>
            </div>
            <CheckCircle2 className="w-8 h-8 text-purple-600 opacity-50" />
          </div>
        </Card>
      </div>

      {/* Progress Bar */}
      <Card className="p-4">
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-gray-900">Daily Progress</h3>
            <span className="text-sm text-gray-600">{Math.round(progressPercentage)}%</span>
          </div>
          <Progress value={progressPercentage} className="h-2" />
          <p className="text-xs text-gray-500">Complete all missions to unlock bonus rewards</p>
        </div>
      </Card>

      {/* Missions List */}
      <div className="space-y-3">
        <h3 className="font-semibold text-lg text-gray-900">Today's Missions</h3>
        {missions.length === 0 ? (
          <Card className="p-8 text-center">
            <p className="text-gray-600">No missions available. Check back later!</p>
          </Card>
        ) : (
          missions.map((mission) => (
            <Card
              key={mission.id}
              className={`p-4 cursor-pointer transition-all hover:shadow-md ${
                mission.completed
                  ? 'bg-green-50 border-green-200'
                  : 'bg-white border-gray-200 hover:border-blue-300'
              }`}
              onClick={() => handleMissionClick(mission)}
            >
              <div className="flex items-start gap-4">
                {/* Icon */}
                <div className="text-3xl mt-1">{getMissionIcon(mission.type)}</div>

                {/* Content */}
                <div className="flex-1">
                  <div className="flex items-start justify-between mb-2">
                    <div>
                      <h4 className="font-semibold text-gray-900">{mission.title}</h4>
                      <p className="text-sm text-gray-600">{mission.description}</p>
                    </div>
                    {mission.completed && (
                      <CheckCircle2 className="w-6 h-6 text-green-600 flex-shrink-0" />
                    )}
                  </div>

                  {/* Badges and Info */}
                  <div className="flex flex-wrap items-center gap-2 mb-3">
                    <Badge className={getDifficultyColor(mission.difficulty)}>
                      {mission.difficulty}
                    </Badge>
                    <Badge variant="outline" className="text-xs">
                      {mission.targetWords} words
                    </Badge>
                    <Badge variant="outline" className="text-xs">
                      ‚è±Ô∏è {mission.estimatedTime} min
                    </Badge>
                    <Badge variant="outline" className="text-xs bg-yellow-50 text-yellow-800">
                      +{mission.reward} XP
                    </Badge>
                  </div>

                  {/* Progress Bar for mission */}
                  {!mission.completed && (
                    <Progress value={0} className="h-1" />
                  )}
                </div>

                {/* Action Button */}
                {!mission.completed && (
                  <Button
                    size="sm"
                    className="bg-blue-600 hover:bg-blue-700 text-white flex-shrink-0"
                  >
                    Start
                  </Button>
                )}
              </div>
            </Card>
          ))
        )}
      </div>

      {/* Recommendations */}
      {recommendationsQuery.data && (
        <Card className="p-4 bg-blue-50 border-blue-200">
          <h4 className="font-semibold text-gray-900 mb-2">üéØ Personalized Recommendations</h4>
          <ul className="space-y-1 text-sm text-gray-700">
            {recommendationsQuery.data.recommendations?.slice(0, 3).map((rec, idx) => (
              <li key={idx} className="flex items-start gap-2">
                <span className="text-blue-600 font-bold">‚Üí</span>
                <span>{rec}</span>
              </li>
            ))}
          </ul>
        </Card>
      )}
    </div>
  );
};

